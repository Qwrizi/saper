using System;
using System.Drawing;
using System.Windows.Forms;

namespace Minesweeper
{
    public partial class MainForm : Form
    {
        private Button[,] fieldButtons;
        private int[,] fieldValues;
        private bool[,] revealed;
        private int fieldSize = 10;
        private int minesCount = 15;
        private bool gameOver = false;
        private bool firstClick = true;
        private int flagsPlaced = 0;

        private MenuStrip menuStrip;
        private ToolStripMenuItem gameToolStripMenuItem;
        private ToolStripMenuItem newGameToolStripMenuItem;
        private ToolStripMenuItem settingsToolStripMenuItem;
        private ToolStripMenuItem exitToolStripMenuItem;
        private Panel gamePanel;
        private Label minesLabel;
        private ComboBox sizeComboBox;
        private ComboBox minesComboBox;
        private Label sizeLabel;
        private Label minesCountLabel;

        public MainForm()
        {
            InitializeComponent();
            InitializeMenu();
            InitializeControls();
            StartNewGame();
        }

        private void InitializeMenu()
        {
            menuStrip = new MenuStrip();
            gameToolStripMenuItem = new ToolStripMenuItem("Игра");
            newGameToolStripMenuItem = new ToolStripMenuItem("Новая игра");
            settingsToolStripMenuItem = new ToolStripMenuItem("Настройки");
            exitToolStripMenuItem = new ToolStripMenuItem("Выход");

            gameToolStripMenuItem.DropDownItems.Add(newGameToolStripMenuItem);
            gameToolStripMenuItem.DropDownItems.Add(settingsToolStripMenuItem);
            gameToolStripMenuItem.DropDownItems.Add(new ToolStripSeparator());
            gameToolStripMenuItem.DropDownItems.Add(exitToolStripMenuItem);

            menuStrip.Items.Add(gameToolStripMenuItem);
            this.Controls.Add(menuStrip);
            this.MainMenuStrip = menuStrip;

            newGameToolStripMenuItem.Click += (s, e) => StartNewGame();
            settingsToolStripMenuItem.Click += (s, e) => ShowSettings();
            exitToolStripMenuItem.Click += (s, e) => this.Close();
        }

        private void InitializeControls()
        {
            gamePanel = new Panel();
            gamePanel.Location = new Point(10, 130);
            gamePanel.BorderStyle = BorderStyle.FixedSingle;
            this.Controls.Add(gamePanel);

            minesLabel = new Label();
            minesLabel.Text = "Флаги: 0/" + minesCount;
            minesLabel.Location = new Point(10, 100);
            minesLabel.AutoSize = true;
            minesLabel.Font = new Font("Arial", 12, FontStyle.Bold);
            this.Controls.Add(minesLabel);

            sizeLabel = new Label();
            sizeLabel.Text = "Размер поля:";
            sizeLabel.Location = new Point(10, 40);
            sizeLabel.AutoSize = true;
            this.Controls.Add(sizeLabel);

            sizeComboBox = new ComboBox();//выбор размер поля
            sizeComboBox.Location = new Point(100, 40);
            sizeComboBox.Size = new Size(150, 30);
            sizeComboBox.Items.AddRange(new object[] { "Маленькое (10x10)", "Среднее (15x15)", "Большое (20x20)" });
            sizeComboBox.SelectedIndex = 0;
            sizeComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            sizeComboBox.DropDownHeight = 100;
            this.Controls.Add(sizeComboBox);

            minesCountLabel = new Label();
            minesCountLabel.Text = "Количество мин:";
            minesCountLabel.Location = new Point(10, 70);
            minesCountLabel.AutoSize = true;
            this.Controls.Add(minesCountLabel);

            minesComboBox = new ComboBox(); //выбор кол-ва мин
            minesComboBox.Location = new Point(100, 70);
            minesComboBox.Size = new Size(150, 30);
            minesComboBox.Items.AddRange(new object[] { "Легко (15 мин)", "Средне (30 мин)", "Сложно (50 мин)" });
            minesComboBox.SelectedIndex = 0;
            minesComboBox.DropDownStyle = ComboBoxStyle.DropDownList;
            minesComboBox.DropDownHeight = 100;
            this.Controls.Add(minesComboBox);

            Button newGameButton = new Button();//игра "Сапер"
            newGameButton.Text = "Новая игра";
            newGameButton.Location = new Point(270, 55);
            newGameButton.Size = new Size(100, 30);
            newGameButton.Click += (s, e) => StartNewGame();
            this.Controls.Add(newGameButton);

            this.Text = "Сапер";
            this.BackColor = Color.LightGray;
            this.FormBorderStyle = FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;
            this.Padding = new Padding(10);
        }

        private void ShowSettings()
        {
            MessageBox.Show("Выберите размер поля и количество мин в меню перед началом игры.", "Настройки");
        }

        private void StartNewGame()
        {
            switch (sizeComboBox.SelectedIndex)
            {
                case 0: fieldSize = 10; break;
                case 1: fieldSize = 15; break;
                case 2: fieldSize = 20; break;
            }

            switch (minesComboBox.SelectedIndex)
            {
                case 0: minesCount = 15; break;
                case 1: minesCount = 30; break;
                case 2: minesCount = 50; break;
            }

            if (minesCount >= fieldSize * fieldSize)//мин не должно быть больше чем клеток
            {
                minesCount = fieldSize * fieldSize - 1;
            }

            minesLabel.Text = "Флаги: 0/" + minesCount;//обновление кол-ва мин
            flagsPlaced = 0;

            gamePanel.Controls.Clear();
            fieldButtons = new Button[fieldSize, fieldSize];
            fieldValues = new int[fieldSize, fieldSize];
            revealed = new bool[fieldSize, fieldSize];

            gamePanel.Size = new Size(fieldSize * 30, fieldSize * 30); //размер панели
            this.ClientSize = new Size(Math.Max(fieldSize * 30 + 30, 400), fieldSize * 30 + 150);

            for (int i = 0; i < fieldSize; i++)//кнопки на поле
            {
                for (int j = 0; j < fieldSize; j++)
                {
                    fieldButtons[i, j] = new Button();
                    fieldButtons[i, j].Size = new Size(30, 30);
                    fieldButtons[i, j].Location = new Point(j * 30, i * 30);
                    fieldButtons[i, j].Font = new Font("Arial", 10, FontStyle.Bold);
                    fieldButtons[i, j].Tag = new Point(i, j);
                    fieldButtons[i, j].MouseDown += FieldButton_MouseDown;
                    gamePanel.Controls.Add(fieldButtons[i, j]);
                }
            }

            gameOver = false;
            firstClick = true; //сброс

            for (int i = 0; i < fieldSize; i++)//поле пустое до первого клика
            {
                for (int j = 0; j < fieldSize; j++)
                {
                    fieldValues[i, j] = 0;
                    revealed[i, j] = false;
                    fieldButtons[i, j].Text = "";
                    fieldButtons[i, j].BackColor = SystemColors.Control;
                    fieldButtons[i, j].Enabled = true;
                }
            }
        }

        private void FieldButton_MouseDown(object sender, MouseEventArgs e)
        {
            if (gameOver) return;

            Button button = (Button)sender;
            Point position = (Point)button.Tag;
            int row = position.X;
            int col = position.Y;

            if (e.Button == MouseButtons.Left)
            {
                if (firstClick)
                {
                    GenerateField(row, col);//генерация поля
                    firstClick = false;
                }

                if (button.Text == "🚩") return; //клетки с фалжками не открываються

                RevealCell(row, col);

                if (fieldValues[row, col] == -1)
                {
                    GameOver(false);
                }
                else if (CheckWin())
                {
                    GameOver(true);
                }
            }
            else if (e.Button == MouseButtons.Right)
            {
                if (!revealed[row, col])//флажок
                {
                    if (button.Text == "🚩")
                    {
                        button.Text = "";
                        flagsPlaced--;
                    }
                    else
                    {
                        button.Text = "🚩";
                        flagsPlaced++;
                    }
                    minesLabel.Text = $"Флаги: {flagsPlaced}/{minesCount}";
                }
            }
        }

        private void GenerateField(int safeRow, int safeCol)
        {
            Random random = new Random();

            int minesPlaced = 0;//расстановка мин 
            while (minesPlaced < minesCount)
            {
                int row = random.Next(fieldSize);
                int col = random.Next(fieldSize);

                if ((row == safeRow && col == safeCol) || //на первой клетке нет мин
                    (Math.Abs(row - safeRow) <= 1 && Math.Abs(col - safeCol) <= 1))
                {
                    continue;
                }

                if (fieldValues[row, col] != -1)
                {
                    fieldValues[row, col] = -1;
                    minesPlaced++;
                }
            }

            for (int i = 0; i < fieldSize; i++)//кол-во мин вогрук
            {
                for (int j = 0; j < fieldSize; j++)
                {
                    if (fieldValues[i, j] != -1)
                    {
                        fieldValues[i, j] = CountAdjacentMines(i, j);
                    }
                }
            }
        }

        private int CountAdjacentMines(int row, int col)
        {
            int count = 0;

            for (int i = Math.Max(0, row - 1); i <= Math.Min(fieldSize - 1, row + 1); i++)
            {
                for (int j = Math.Max(0, col - 1); j <= Math.Min(fieldSize - 1, col + 1); j++)
                {
                    if (fieldValues[i, j] == -1)
                    {
                        count++;
                    }
                }
            }

            return count;
        }

        private void RevealCell(int row, int col)
        {
            if (row < 0 || row >= fieldSize || col < 0 || col >= fieldSize || revealed[row, col])
            {
                return;
            }

            revealed[row, col] = true;
            fieldButtons[row, col].Enabled = false;

            if (fieldValues[row, col] == -1)
            {
                fieldButtons[row, col].Text = "💣";
                fieldButtons[row, col].BackColor = Color.Red;
            }
            else if (fieldValues[row, col] > 0)
            {
                fieldButtons[row, col].Text = fieldValues[row, col].ToString();
                fieldButtons[row, col].ForeColor = GetNumberColor(fieldValues[row, col]); 
            }
            else
            {
                fieldButtons[row, col].Text = "";
                fieldButtons[row, col].BackColor = SystemColors.ControlLight;
            }

            if (fieldValues[row, col] == 0)
            {
                for (int i = Math.Max(0, row - 1); i <= Math.Min(fieldSize - 1, row + 1); i++)
                {
                    for (int j = Math.Max(0, col - 1); j <= Math.Min(fieldSize - 1, col + 1); j++)
                    {
                        if (i != row || j != col)
                        {
                            RevealCell(i, j);
                        }
                    }
                }
            }
        }

        private Color GetNumberColor(int number)
        {
            switch (number)
            {
                case 1: return Color.Blue;
                case 2: return Color.FromArgb(0, 128, 0); 
                case 3: return Color.Red;
                case 4: return Color.FromArgb(0, 0, 128);
                case 5: return Color.FromArgb(128, 0, 0); 
                case 6: return Color.FromArgb(0, 128, 128); 
                case 7: return Color.Black;
                case 8: return Color.Gray;
                default: return Color.Black;
            }
        }

        private bool CheckWin()
        {
            for (int i = 0; i < fieldSize; i++)
            {
                for (int j = 0; j < fieldSize; j++)
                {
                    if (fieldValues[i, j] != -1 && !revealed[i, j])
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        private void GameOver(bool isWin)
        {
            gameOver = true;
            for (int i = 0; i < fieldSize; i++)
            {
                for (int j = 0; j < fieldSize; j++)
                {
                    if (!revealed[i, j])
                    {
                        revealed[i, j] = true;
                        fieldButtons[i, j].Enabled = false;

                        if (fieldValues[i, j] == -1)
                        {
                            fieldButtons[i, j].Text = "💣";
                        }
                        else if (fieldValues[i, j] > 0)
                        {
                            fieldButtons[i, j].Text = fieldValues[i, j].ToString();
                            fieldButtons[i, j].ForeColor = GetNumberColor(fieldValues[i, j]); 
                        }
                    }
                }
            }

            if (isWin)
            {
                MessageBox.Show("Поздравляем! Вы победили!", "Победа");
            }
            else
            {
                MessageBox.Show("Вы проиграли! Попробуйте еще раз.", "Поражение");
            }
        }

        private void MainForm_Load(object sender, EventArgs e)
        {

        }
    }
}









using System;
using System.Windows.Forms;

namespace Minesweeper
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new MainForm());
        }
    }
}


using System;
using System.Drawing;
using System.Windows.Forms;

namespace MinesweeperGame
{
    public partial class Form1 : Form
    {
        private int gridSize = 10; // Размер поля (по умолчанию 10x10)
        private const int cellSize = 30; // Размер ячейки в пикселях
        private int mineCount = 10; // Количество мин (по умолчанию - легко)

        private Button[,] buttons;
        private bool[,] mines;
        private bool[,] revealed;
        private bool firstClick = true;
        private int flagsPlaced = 0;
        private DateTime startTime;
        private Timer gameTimer;
        private Label flagsLabel;
        private Label timeLabel;

        public Form1()
        {
            InitializeComponent();
            InitializeMenu();
            InitializeGame();
        }

        private void InitializeMenu()
        {
            // Создаем главное меню
            MenuStrip mainMenu = new MenuStrip();

            // Меню "Игра"
            ToolStripMenuItem gameMenu = new ToolStripMenuItem("Игра");
            ToolStripMenuItem newGameItem = new ToolStripMenuItem("Новая игра", null, NewGame_Click);
            ToolStripMenuItem exitItem = new ToolStripMenuItem("Выход", null, Exit_Click);
            gameMenu.DropDownItems.Add(newGameItem);
            gameMenu.DropDownItems.Add(exitItem);

            // Меню "Настройки"
            ToolStripMenuItem settingsMenu = new ToolStripMenuItem("Настройки");

            // Подменю "Размер поля"
            ToolStripMenuItem sizeMenu = new ToolStripMenuItem("Размер поля");
            ToolStripMenuItem smallSize = new ToolStripMenuItem("Маленькое (8x8)", null, (s, e) => SetGameSize(8));
            ToolStripMenuItem mediumSize = new ToolStripMenuItem("Среднее (10x10)", null, (s, e) => SetGameSize(10));
            ToolStripMenuItem largeSize = new ToolStripMenuItem("Большое (12x12)", null, (s, e) => SetGameSize(12));
            sizeMenu.DropDownItems.Add(smallSize);
            sizeMenu.DropDownItems.Add(mediumSize);
            sizeMenu.DropDownItems.Add(largeSize);

            // Подменю "Сложность"
            ToolStripMenuItem difficultyMenu = new ToolStripMenuItem("Сложность");
            ToolStripMenuItem easy = new ToolStripMenuItem("Легко", null, (s, e) => SetDifficultyEasy());
            ToolStripMenuItem medium = new ToolStripMenuItem("Средне", null, (s, e) => SetDifficultyMedium());
            ToolStripMenuItem hard = new ToolStripMenuItem("Сложно", null, (s, e) => SetDifficultyHard());
            difficultyMenu.DropDownItems.Add(easy);
            difficultyMenu.DropDownItems.Add(medium);
            difficultyMenu.DropDownItems.Add(hard);

            settingsMenu.DropDownItems.Add(sizeMenu);
            settingsMenu.DropDownItems.Add(difficultyMenu);

            // Добавляем меню на форму
            mainMenu.Items.Add(gameMenu);
            mainMenu.Items.Add(settingsMenu);
            this.Controls.Add(mainMenu);
            this.MainMenuStrip = mainMenu;
        }

        private void InitializeGame()
        {
            // Очищаем старые элементы управления
            if (buttons != null)
            {
                foreach (Button button in buttons)
                {
                    this.Controls.Remove(button);
                }
            }
            if (flagsLabel != null) this.Controls.Remove(flagsLabel);
            if (timeLabel != null) this.Controls.Remove(timeLabel);
            if (gameTimer != null) gameTimer.Stop();

            // Инициализация массивов
            buttons = new Button[gridSize, gridSize];
            mines = new bool[gridSize, gridSize];
            revealed = new bool[gridSize, gridSize];
            flagsPlaced = 0;
            firstClick = true;

            // Устанавливаем размер формы
            int panelHeight = 40;
            this.ClientSize = new Size(gridSize * cellSize, gridSize * cellSize + panelHeight);
            this.FormBorderStyle = FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;

            // Создаем панель информации
            flagsLabel = new Label();
            UpdateFlagsLabel();
            flagsLabel.Font = new Font("Arial", 12, FontStyle.Bold);
            flagsLabel.ForeColor = Color.Red;
            flagsLabel.Location = new Point(10, 5);
            flagsLabel.Size = new Size(150, 30);
            this.Controls.Add(flagsLabel);

            timeLabel = new Label();
            timeLabel.Text = "Время: 0";
            timeLabel.Font = new Font("Arial", 12, FontStyle.Bold);
            timeLabel.ForeColor = Color.Blue;
            timeLabel.Location = new Point(gridSize * cellSize - 100, 5);
            timeLabel.Size = new Size(100, 30);
            timeLabel.TextAlign = ContentAlignment.TopRight;
            this.Controls.Add(timeLabel);

            // Инициализируем таймер
            gameTimer = new Timer();
            gameTimer.Interval = 1000;
            gameTimer.Tick += GameTimer_Tick;

            // Создаем кнопки для каждой ячейки
            for (int row = 0; row < gridSize; row++)
            {
                for (int col = 0; col < gridSize; col++)
                {
                    Button button = new Button();
                    button.Width = cellSize;
                    button.Height = cellSize;
                    button.Left = col * cellSize;
                    button.Top = row * cellSize + panelHeight;
                    button.Font = new Font("Arial", 12, FontStyle.Bold);
                    button.Tag = new Point(row, col);
                    button.MouseUp += Button_MouseUp;

                    buttons[row, col] = button;
                    this.Controls.Add(button);
                }
            }
        }

        private void UpdateFlagsLabel()
        {
            flagsLabel.Text = $"Флаги: {flagsPlaced}/{mineCount}";
        }

        private void GameTimer_Tick(object sender, EventArgs e)
        {
            TimeSpan elapsed = DateTime.Now - startTime;
            timeLabel.Text = $"Время: {elapsed.Seconds}";
        }

        private void PlaceMines(int excludeRow, int excludeCol)
        {
            Random random = new Random();
            int minesPlaced = 0;

            while (minesPlaced < mineCount)
            {
                int row = random.Next(gridSize);
                int col = random.Next(gridSize);

                // Не ставим мину на первую нажатую ячейку и вокруг нее
                if ((row == excludeRow && col == excludeCol) ||
                    (Math.Abs(row - excludeRow) <= 1 && Math.Abs(col - excludeCol) <= 1))
                {
                    continue;
                }

                if (!mines[row, col])
                {
                    mines[row, col] = true;
                    minesPlaced++;
                }
            }

            UpdateFlagsLabel();
        }

        private int CountAdjacentMines(int row, int col)
        {
            int count = 0;

            for (int r = Math.Max(0, row - 1); r <= Math.Min(gridSize - 1, row + 1); r++)
            {
                for (int c = Math.Max(0, col - 1); c <= Math.Min(gridSize - 1, col + 1); c++)
                {
                    if (mines[r, c]) count++;
                }
            }

            return count;
        }

        private void RevealCell(int row, int col)
        {
            if (row < 0 || row >= gridSize || col < 0 || col >= gridSize || revealed[row, col])
                return;

            revealed[row, col] = true;
            buttons[row, col].Enabled = false;

            // Если на ячейке был флаг, уменьшаем счетчик
            if (buttons[row, col].Text == "🚩")
            {
                flagsPlaced--;
                UpdateFlagsLabel();
            }

            if (mines[row, col])
            {
                // Игрок наступил на мину
                buttons[row, col].Text = "💣";
                GameOver(false);
                return;
            }

            int adjacentMines = CountAdjacentMines(row, col);
            if (adjacentMines > 0)
            {
                buttons[row, col].Text = adjacentMines.ToString();
                buttons[row, col].ForeColor = GetNumberColor(adjacentMines);
            }
            else
            {
                // Раскрываем соседние пустые ячейки
                for (int r = row - 1; r <= row + 1; r++)
                {
                    for (int c = col - 1; c <= col + 1; c++)
                    {
                        RevealCell(r, c);
                    }
                }
            }

            CheckWin();
        }

        private Color GetNumberColor(int number)
        {
            switch (number)
            {
                case 1: return Color.Blue;
                case 2: return Color.Green;
                case 3: return Color.Red;
                case 4: return Color.DarkBlue;
                case 5: return Color.DarkRed;
                case 6: return Color.Teal;
                case 7: return Color.Black;
                case 8: return Color.Gray;
                default: return Color.Black;
            }
        }

        private void Button_MouseUp(object sender, MouseEventArgs e)
        {
            Button button = (Button)sender;
            Point position = (Point)button.Tag;
            int row = position.X;
            int col = position.Y;

            if (e.Button == MouseButtons.Left)
            {
                if (firstClick)
                {
                    PlaceMines(row, col);
                    firstClick = false;
                    startTime = DateTime.Now;
                    gameTimer.Start();
                }

                if (button.Text != "🚩") // Не открываем ячейки с флагами
                {
                    RevealCell(row, col);
                }
            }
            else if (e.Button == MouseButtons.Right)
            {
                if (!revealed[row, col])
                {
                    if (button.Text == "🚩")
                    {
                        button.Text = "";
                        flagsPlaced--;
                    }
                    else if (flagsPlaced < mineCount) // Нельзя поставить больше флагов, чем мин
                    {
                        button.Text = "🚩";
                        flagsPlaced++;
                    }
                    UpdateFlagsLabel();
                }
            }
        }

        private void CheckWin()
        {
            for (int row = 0; row < gridSize; row++)
            {
                for (int col = 0; col < gridSize; col++)
                {
                    if (!mines[row, col] && !revealed[row, col])
                    {
                        return; // Есть нераскрытые ячейки без мин
                    }
                }
            }

            GameOver(true);
        }

        private void GameOver(bool isWin)
        {
            gameTimer.Stop();

            // Показываем все мины
            for (int row = 0; row < gridSize; row++)
            {
                for (int col = 0; col < gridSize; col++)
                {
                    if (mines[row, col])
                    {
                        buttons[row, col].Text = "💣";
                        buttons[row, col].Enabled = false;
                    }
                }
            }

            TimeSpan elapsed = DateTime.Now - startTime;
            string message = isWin
                ? $"Поздравляем! Вы победили!\nВремя: {elapsed.TotalSeconds:F0} секунд"
                : "Игра окончена! Вы проиграли!";

            MessageBox.Show(message, "Игра окончена", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void NewGame_Click(object sender, EventArgs e)
        {
            NewGame();
        }

        private void NewGame()
        {
            InitializeGame();
        }

        private void Exit_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void SetGameSize(int size)
        {
            gridSize = size;
            // Сохраняем текущий уровень сложности при изменении размера
            if (mineCount == 10) SetDifficultyEasy();
            else if (mineCount == 15) SetDifficultyMedium();
            else if (mineCount == 20) SetDifficultyHard();
            else SetDifficultyMedium(); // По умолчанию, если что-то пошло не так
        }

        private void SetDifficultyEasy()
        {
            mineCount = 10;
            NewGame();
        }

        private void SetDifficultyMedium()
        {
            mineCount = 15;
            NewGame();
        }

        private void SetDifficultyHard()
        {
            mineCount = 20;
            NewGame();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }
    }
}
